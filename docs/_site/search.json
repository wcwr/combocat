[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Combocat",
    "section": "",
    "text": "This is the documentation for Combocat, a start-to-finish platform for drug combination screening.\nCombocat is fully open-source!üéâ\nIn this documentation, you will find steps to complete both experimental and analytical parts of Combocat experiments. The experimental sections include step-by-step protocols with examples. In the data analysis sections, we provide steps for processing and analyzing results using the combocat R package. Browse links in the sidebar to the left to find out information about each step.\nüí° Tip: use the search function in the side bar to look for specific protocol steps or topics",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Combocat",
    "section": "",
    "text": "This is the documentation for Combocat, a start-to-finish platform for drug combination screening.\nCombocat is fully open-source!üéâ\nIn this documentation, you will find steps to complete both experimental and analytical parts of Combocat experiments. The experimental sections include step-by-step protocols with examples. In the data analysis sections, we provide steps for processing and analyzing results using the combocat R package. Browse links in the sidebar to the left to find out information about each step.\nüí° Tip: use the search function in the side bar to look for specific protocol steps or topics",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-quarto",
    "href": "index.html#what-is-quarto",
    "title": "Combocat",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto helps you have your ideas and your code in one place, and present it in a beautiful way.\nQuarto unifies and extends the RMarkdown ecosystem - it unifies by combining the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system. And it extends in several ways: all features are possible beyond R too, including Python and Javascript. It also has more ‚Äúguardrails‚Äù: accessibility and inclusion are centered in the design. Quarto is for people who love RMarkdown, and it‚Äôs for people who have never used RMarkdown.\nThe ability for Quarto to streamline collaboration has been so cool and important for our NASA Openscapes project. Quarto has been a common place for us to collaborate - across R and Python languages and coding expertise.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-this-tutorial",
    "href": "index.html#what-is-this-tutorial",
    "title": "Combocat",
    "section": "What is this tutorial?",
    "text": "What is this tutorial?\nThis is a 1-hour tutorial that can be used to teach or as self-paced learning.\nWe introduce Quarto by exploring this tutorial website, and practicing the basic Quarto workflow using different tools (GitHub browser, RStudio, and Jupyter) for editing your website.\nWe‚Äôll start off from the browser so you don‚Äôt need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. If you don‚Äôt already have a workflow to edit files and sync to GitHub from your computer, I recommend RStudio. You don‚Äôt need to know R to use RStudio, and it has powerful editor features that make for happy workflows.\nQuarto.org is the go-to place for full documentation and more tutorials!",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#example-quarto-sites",
    "href": "index.html#example-quarto-sites",
    "title": "Combocat",
    "section": "Example Quarto sites",
    "text": "Example Quarto sites\nA few Quarto websites from Openscapes - so far we have been using Quarto for documentation using Quarto and Markdown files and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\nNASA Earthdata Cloud Cookbook\n2021 NASA Cloud Hackathon\nFaylab Lab Manual\nA Quarto tip a day, by Mine √áetinkaya-Rundel",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Combocat",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe‚Äôre developing this tutorial to help folks with different levels of technical skills use Quarto for documentation and tutorial building. This tutorial was originally created for several different audiences: NASA-Openscapes researcher support engineers using Python, communications directors at organizations promoting open science who do not identify as coders, and fisheries scientists curious about transitioning from RMarkdown. We‚Äôre hoping it‚Äôs useful to folks with backgrounds as wide as these; if you find it useful or have suggestions for improvement, please let us know by clicking ‚ÄúEdit this page‚Äù or ‚ÄúReport an issue‚Äù at the upper right side of any page.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Experimental Setup",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#exploring-online",
    "href": "explore.html#exploring-online",
    "title": "Experimental Setup",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#quarto.yml-intro",
    "href": "explore.html#quarto.yml-intro",
    "title": "Experimental Setup",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#fork-to-your-account",
    "href": "explore.html#fork-to-your-account",
    "title": "Experimental Setup",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#setup-github-action",
    "href": "explore.html#setup-github-action",
    "title": "Experimental Setup",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#confirm",
    "href": "explore.html#confirm",
    "title": "Experimental Setup",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#renaming-your-repo",
    "href": "explore.html#renaming-your-repo",
    "title": "Experimental Setup",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "explore.html#onward",
    "href": "explore.html#onward",
    "title": "Experimental Setup",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Experimental Setup"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Combocat",
    "section": "Overview",
    "text": "Overview\nMany diseases like cancer and infectious diseases require drug combinations for effective treatment, but the process of discovering new combinations slow and challenging.\nQuarto unifies and extends the RMarkdown ecosystem - it unifies by combining the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system. And it extends in several ways: all features are possible beyond R too, including Python and Javascript. It also has more ‚Äúguardrails‚Äù: accessibility and inclusion are centered in the design. Quarto is for people who love RMarkdown, and it‚Äôs for people who have never used RMarkdown.\n\nttt",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#reference",
    "href": "index.html#reference",
    "title": "Combocat",
    "section": "Reference",
    "text": "Reference\nPlease cite our published work: [MANUSCRIPT HERE]",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html",
    "href": "experimental_dense_mode.html",
    "title": "test",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#exploring-online",
    "href": "experimental_dense_mode.html#exploring-online",
    "title": "test",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#quarto.yml-intro",
    "href": "experimental_dense_mode.html#quarto.yml-intro",
    "title": "test",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#fork-to-your-account",
    "href": "experimental_dense_mode.html#fork-to-your-account",
    "title": "test",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#setup-github-action",
    "href": "experimental_dense_mode.html#setup-github-action",
    "title": "test",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#confirm",
    "href": "experimental_dense_mode.html#confirm",
    "title": "test",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#renaming-your-repo",
    "href": "experimental_dense_mode.html#renaming-your-repo",
    "title": "test",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_dense_mode.html#onward",
    "href": "experimental_dense_mode.html#onward",
    "title": "test",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Experimental setup",
      "Dense mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html",
    "href": "experimental_sparse_mode.html",
    "title": "test2",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#exploring-online",
    "href": "experimental_sparse_mode.html#exploring-online",
    "title": "test2",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#quarto.yml-intro",
    "href": "experimental_sparse_mode.html#quarto.yml-intro",
    "title": "test2",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#fork-to-your-account",
    "href": "experimental_sparse_mode.html#fork-to-your-account",
    "title": "test2",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#setup-github-action",
    "href": "experimental_sparse_mode.html#setup-github-action",
    "title": "test2",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#confirm",
    "href": "experimental_sparse_mode.html#confirm",
    "title": "test2",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#renaming-your-repo",
    "href": "experimental_sparse_mode.html#renaming-your-repo",
    "title": "test2",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "experimental_sparse_mode.html#onward",
    "href": "experimental_sparse_mode.html#onward",
    "title": "test2",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Experimental setup",
      "Sparse mode protocol"
    ]
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#exploring-online",
    "href": "background.html#exploring-online",
    "title": "Background",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#quarto.yml-intro",
    "href": "background.html#quarto.yml-intro",
    "title": "Background",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#fork-to-your-account",
    "href": "background.html#fork-to-your-account",
    "title": "Background",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#setup-github-action",
    "href": "background.html#setup-github-action",
    "title": "Background",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#confirm",
    "href": "background.html#confirm",
    "title": "Background",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#renaming-your-repo",
    "href": "background.html#renaming-your-repo",
    "title": "Background",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background.html#onward",
    "href": "background.html#onward",
    "title": "Background",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "background2.html",
    "href": "background2.html",
    "title": "Background",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#exploring-online",
    "href": "background2.html#exploring-online",
    "title": "Background",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#quarto.yml-intro",
    "href": "background2.html#quarto.yml-intro",
    "title": "Background",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#fork-to-your-account",
    "href": "background2.html#fork-to-your-account",
    "title": "Background",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#setup-github-action",
    "href": "background2.html#setup-github-action",
    "title": "Background",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#confirm",
    "href": "background2.html#confirm",
    "title": "Background",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#renaming-your-repo",
    "href": "background2.html#renaming-your-repo",
    "title": "Background",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "background2.html#onward",
    "href": "background2.html#onward",
    "title": "Background",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Experimental setup",
      "Background222"
    ]
  },
  {
    "objectID": "experimental_landing.html",
    "href": "experimental_landing.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#exploring-online",
    "href": "experimental_landing.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#quarto.yml-intro",
    "href": "experimental_landing.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#fork-to-your-account",
    "href": "experimental_landing.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#setup-github-action",
    "href": "experimental_landing.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#confirm",
    "href": "experimental_landing.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#renaming-your-repo",
    "href": "experimental_landing.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "experimental_landing.html#onward",
    "href": "experimental_landing.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Experimental setup",
      "Experimental overview"
    ]
  },
  {
    "objectID": "analysis_landing.html",
    "href": "analysis_landing.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#exploring-online",
    "href": "analysis_landing.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#quarto.yml-intro",
    "href": "analysis_landing.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#fork-to-your-account",
    "href": "analysis_landing.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#setup-github-action",
    "href": "analysis_landing.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#confirm",
    "href": "analysis_landing.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#renaming-your-repo",
    "href": "analysis_landing.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_landing.html#onward",
    "href": "analysis_landing.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Analysis",
      "Analysis overview"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html",
    "href": "analysis_dense_mode.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#exploring-online",
    "href": "analysis_dense_mode.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#quarto.yml-intro",
    "href": "analysis_dense_mode.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#fork-to-your-account",
    "href": "analysis_dense_mode.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#setup-github-action",
    "href": "analysis_dense_mode.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#confirm",
    "href": "analysis_dense_mode.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#renaming-your-repo",
    "href": "analysis_dense_mode.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_dense_mode.html#onward",
    "href": "analysis_dense_mode.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Analysis",
      "Dense mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html",
    "href": "analysis_sparse_mode.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#exploring-online",
    "href": "analysis_sparse_mode.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#quarto.yml-intro",
    "href": "analysis_sparse_mode.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#fork-to-your-account",
    "href": "analysis_sparse_mode.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#setup-github-action",
    "href": "analysis_sparse_mode.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#confirm",
    "href": "analysis_sparse_mode.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#renaming-your-repo",
    "href": "analysis_sparse_mode.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "analysis_sparse_mode.html#onward",
    "href": "analysis_sparse_mode.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Analysis",
      "Sparse mode analysis"
    ]
  },
  {
    "objectID": "machine_learning.html",
    "href": "machine_learning.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#exploring-online",
    "href": "machine_learning.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#quarto.yml-intro",
    "href": "machine_learning.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#fork-to-your-account",
    "href": "machine_learning.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#setup-github-action",
    "href": "machine_learning.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#confirm",
    "href": "machine_learning.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#renaming-your-repo",
    "href": "machine_learning.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "machine_learning.html#onward",
    "href": "machine_learning.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Machine learning"
    ]
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "Background222",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter).",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#exploring-online",
    "href": "advanced.html#exploring-online",
    "title": "Background222",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#quarto.yml-intro",
    "href": "advanced.html#quarto.yml-intro",
    "title": "Background222",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#fork-to-your-account",
    "href": "advanced.html#fork-to-your-account",
    "title": "Background222",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#setup-github-action",
    "href": "advanced.html#setup-github-action",
    "title": "Background222",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#confirm",
    "href": "advanced.html#confirm",
    "title": "Background222",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#renaming-your-repo",
    "href": "advanced.html#renaming-your-repo",
    "title": "Background222",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.",
    "crumbs": [
      "Advanced topics"
    ]
  },
  {
    "objectID": "advanced.html#onward",
    "href": "advanced.html#onward",
    "title": "Background222",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown.",
    "crumbs": [
      "Advanced topics"
    ]
  }
]